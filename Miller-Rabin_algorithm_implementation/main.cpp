
#include "Miller_Rabin.hpp"
#include <chrono>
#include <ctime>

/* The modular exponentiation function I have is very powerful because it could effectuate 
 * the computation using a recursive approach by choping the  exponent in small portions by
 * calling itself recursively.  
 *
 * With this efficient exponentiaton funcion Muiller Rabin  Test is  pretty  fast even with
 * large values. We have done the testing using both version of the implementation of 
 * the algorithm. The first version is the regular version of the Miller Rabin Test where
 * ( a^(n - 1) mod = n - 1 || a^( n - 1 ) = 1 ).  if either of both condition is met we found
 * a prime number other the program is to return -1 and condition the testing.
 *
 * For the second test, we only consider the one condition. In other words,  
 * 	if( a^(  n - 1 ) == 1 ) ) 
 * 		we found a a prime number
 * 	else 
 * 		The program would keep testing  different value of a until a prime 
 * 		number is found.
 *
 * To ensure the accuracy of the test, we have evaluated, we have set up timer  to mesure the
 * duration of both implementation running time. We use number in the length of 1000 to 1500
 * for the experiments. We measure the duration of each test. 
 * for the first test we the system was enable to  effectuate in the following duration:
 * 
 * 	Prime Number: 8227028054135037162333499182415008570420980883543929545979734809512167343505430673870602242589481876043375684060339717677255360820501784882752737446684371641203977219051247583798680809111276453388697440581160995032846207188807245585620821180953276373370326400624662161659152403417107029207648457226159941958848762487201345026597042203545667848940694570080313130843246798086313605311315049037064471254253867759057423020011139152801108865711249637527707381930774792306873567597559368071166143213663322975217201585675480324692629492171453003161657154435352876665485731428937033383915100581891100104412533936566591693978670957841949340468756547154337765172932665349339498315705357353698018223344056498813459929621502443173473196390425831698388024847488136700949435798089341095724805650891926116256166825758808848994935598627438684493067335374340122914033413441455859949409339470792583613484759305856673893774776940373040468754338749156323313440622662086600533813644281682831654383444100813883635439852050137752996849993042804103355321887491738957452392698591899514710656263293691429380476449259990757232063256866697470728399782575493394612019205088100050944291200643258656500134927875530820799844592058362715149
		
 * 	First experiment duration:  53.6425s
 *
 * For The second test we got the following
 * 	
 *	Prime Number: 8953672826771052170182908825393775876419071051745107787007346875394056408795148950926418428573463727246590665138277594867366692006601601828381686972651374638151941744129365300145817873159155056411888224586643207530622385636585025408017044971956814538785599281307502179306076973345794629380103519242970084027796850050957711926171250211336700771650549986511324902368428600227992212481661915447151772057372963344230464344899875226353622127140963358083195094346687815460364802048955524223663794951373976349167116227392620949151766514724355582277344403740686882082595173136758124967310784434653572220017374074208498397659109825783259008775707085433551705378542339301362272183840907540254988352644691092475899883036176659486455581689698816780466245239446311344767228830236659551669510778784857611684942003798412161876695375969514294817426213571124379623193050872944264602302257871385775134934755155008557587452058456799153209292597500995904337610168313493169137963995093352451417899352634796228079588807666457784428526276587872422938669383155727308214035699132429802356709542134771711638053335455917253926227168279694984306692833692907049938467637600433397181594087278964585664079 	
 *
 * 	Second Experiment duration: 539.668s

 *
 *
 * For the second  version of the algorithm, it tooks more time to effectuate the expiriment.
 * In other, it is less efficient compare to the first experiment. 
 *
 * We conclude that the first version of the experiment is more efficient.
 *
 *
 *
 */

int main()
{
	// Creating a Miller_Rabin object
	Miller_Rabin M; 
	
	// Variables to determine the range of random 
	// number that would generated by the boost 
	// random library
	int min_size, max_size;
	
	// Get input from the user 
	std::vector< int > input_vec = M.get_user_input( min_size, max_size );
	
	std::cout << " Waiting for a LARGE Prime Number...\n"; 
	
	// Set up a clock for the first  
	// experiment
	clock_t  begin = clock();
	
	// Start the first experiment by calling this function
	cpp_int large_prime =  M.primes_generation( input_vec[ 0 ], input_vec[ 1 ] ); 
	
	// Display the prime number
	std::cout <<"Prime Number: " <<  large_prime << " " <<  std::endl;
	
	// Set up a clock for the end of the first experiment
	clock_t end =  clock();

	// Get the duration of the first experiment
	double duration_1 = double( end - begin ) / CLOCKS_PER_SEC;

	std::cout <<"First experiment duration: " << duration_1 << std::endl;
	
	/***************************** SECOND TEST ************************************/ 

	// Set up a clock the  second experiment
	clock_t  begin_2 = clock(); 

	//  Start the second experiment
	cpp_int large_prime_2  = M.primes_generation( input_vec[ 0 ], input_vec[ 1 ] );

	// Display the prime number
	std::cout <<"Prime Number: " << large_prime_2 << std::endl;
	
	// End of the second experiment
	clock_t end_2 = clock();

	// Get the duration of  the second experiment 
	double duration_2 = double( end_2 -  begin_2 ) / CLOCKS_PER_SEC; 

	std::cout <<"Second Experiment duration: " << duration_2 << std::endl; 

	return 0;

}	
